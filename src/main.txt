/* vim:set noexpandtab tabstop=4 wrap */
#include "CamacCrate.h"
//#include "Lecroy3377.h"
//#include "Lecroy4300b.h"
#include "Jorway85A.h"
#include "libxxusb.h"
#include "usb.h"
using namespace std
CamacCrate* Create(string cardname, string config, int cardslot);
// see CCDAQ.cpp in ANNIEDAQ:MRD branch for example on using the CAMAC internal stack
// see CCUSB.cpp in ANNIEDAQ:MRD branch for example on doing Read/Write of LeCroy cards in ToolAnalysis chain

int main(int argc, char* argv[]){
	///////////////////////////////////////
	// master branch: CCTrigger.h
	
	string configcc;           // Module slots
	
	vector<string> Lcard, Ccard;
	vector<int> Ncard;
	
	map<string, vector<CamacCrate*> >::iterator iL;  //Iterates over Module.CC
	vector<CamacCrate*>::iterator iC;                          //Iterates over Module.CC<vector>
	
	////////////////////////////////////
	// master branch: MRDData.h
	struct Channel          //Bunch of Channel makes Card
	{
		map<int, int> ch;
	};
	struct Card             //Array of Card make Module
	{
		vector<Channel> Num;
		vector<int> Slot;
	};
	struct Module           // One Struct to rule them all, One Struct to find them, One Struct to
	                        // bring them all and in the darkness bind them
	{
		map<string, Card> Data;                          //Data
		map<string, vector<CamacCrate*> > CC;       //Camac module class
	};
	
	Module List;                                                   //Data Model for Lecroys
	bool TRG;                                                      //Trigger?      Activate other tools
	
	//////////////////////////////////////
	// MRD branch: Lecroy.h
	Channel Data;
	string DC;                                                //Module slots DC is TDC or ADC
	
	//////////////////////////////////////
	// Added by me, for using.
	int scalervals[4];                                             //Read scaler values into this
	
	///////////////////////////////////////
	// master branch: CCTrigger.cpp - Initialise();
	// read module configurations
	configcc = "configfiles/ModuleConfig"; // card list file
	
	ifstream fin (configcc.c_str());
	string Line;
	stringstream ssL;
	string sEmp;
	int iEmp;

	int c = 0;
	while (getline(fin, Line))
	{
		if (Line[0] == '#') continue;
		else
		{
			ssL.str("");
			ssL.clear();
			ssL << Line;
			if (ssL.str() != "")
			{
				ssL >> sEmp;
				Lcard.push_back(sEmp);		//Modele L
				ssL >> iEmp;
				Ncard.push_back(iEmp);		//Slot N
				ssL >> sEmp;
				Ccard.push_back(sEmp);		//Slot register file
			}
		}
	}
	fin.close();
	
	cout << "Number of cards: " << Lcard.size() << endl;
	// CamacCrate* CC = new CamacCrate;                         // CamacCrate at 0
	
	//////////////////////////////////////
	// Create card object based on configuration read from file
	
	int trg_pos = 0;                                            // position of trigger card in list of cards
	int scaler_pos = -1;                                         // position of scaler in list of cards
	cout << "begin scan over " <<Lcard.size()<< " cards " << endl;
	for (int i = 0; i < Lcard.size(); i++)                      // CHECK i
	{
		if (Lcard.at(i) == "TDC" || Lcard.at(i) == "ADC")
		{
			List.CC[Lcard.at(i)].push_back(Create(Lcard.at(i), Ccard.at(i), Ncard.at(i)));  //They use CC at 0
		}
		else if (Lcard.at(i) == "TRG")
		{
			trg_pos = List.CC["TDC"].size();
			List.CC["TDC"].push_back(Create("TDC", Ccard.at(i), Ncard.at(i)));              //They use CC at 0
		}
		else if (Lcard.at(i) == "SCA")
		{
			scaler_pos = List.CC["SCA"].size();    // we only have one scaler anyway
			cout << "scaler found, list pos = " << scaler_pos << endl;
			List.CC["SCA"].push_back(Create("SCA", Ccard.at(i), Ncard.at(i)));               //They use CC at 0
			cout << "constructed Jorway85A module" << endl;
		}
		else cout << "\n\nUnkown card\n" << endl;
	}
	
	cout << "Primary scaler is in slot ";
	cout << List.CC["SCA"].at(scaler_pos)->GetSlot() << endl;
	
	//////////////////////////////////////
	// MRD branch: LeCroy.cpp - Initialise();
	//cout << "Clearing modules and printing the registers" << endl;

	for (int i = 0; i < List.CC[DC].size(); i++)
	{
		List.CC[DC].at(i)->ClearAll();
		//List.CC[DC].at(i)->GetRegister();   // not implemented for Scaler yet
		//List.CC[DC].at(i)->PrintRegRaw();   // not implemented for Scaler yet
	}
	
	// Execute: MAIN LOOP
	for (int loopi=0; loopi<10; loopi++){
	
		//////////////////////////////////////
		// Master branch: CCTrigger.cpp - Execute();
		
		/* these were disabled - unused?
		//Clearing all the cards, using iterators
			iL = List.CC.begin();		//iL is an iterator over a map<string, vector<CamacCrate*> >
			for ( ; iL != List.CC.end(); ++iL)
			{
				iC = iL->second.begin();	//iC is an iterator over a vector<CamacCrate*>
				for ( ; iC != iL->second.end(); ++iC)
					(*iC)->ClearAll();
			}
		
		//Clearing all the cards, using indices
			for (int i = 0; i < List.CC["TDC"].size(); i++)
				List.CC["TDC"].at(i)->ClearAll();
			for (int i = 0; i < List.CC["ADC"].size(); i++)
				List.CC["ADC"].at(i)->ClearAll();
		*/
		
		// unused for PMT testing. for now, at least
//		TRG = false;
//		if(List.CC["TDC"].at(trg_pos)->TestEvent() == 1) TRG = true;  // for real (not soft/random) trigger
		
		////////////////////////////////////
		// MRD branch: Lecroy.cpp - Execute();
		
		// the ToolChain seems to have two LeCroy tools back-to-back, to read TDCs and ADCs.
		// effectively run the code once with DC="ADC", then again with DC="TDC".
//		DC = "TDC";
//		if (TRG){
//			//cout << "TRG on!\n" << endl;
//			for (int i = 0; i < List.CC[DC].size(); i++)
//			{
//				Data.ch.clear();
//				if (trg_mode == 2) List.CC[DC].at(i)->InitTest();
//				List.CC[DC].at(i)->GetData(Data.ch);
//				if (Data.ch.size() != 0)
//				{
//					List.Data[DC].Slot.push_back(List.CC[DC].at(i)->GetSlot());
//					List.Data[DC].Num.push_back(Data);
//					List.CC[DC].at(i)->ClearAll();
//				}
//			}
//		}
		
		int ret = List.CC["SCA"].at(scaler_pos)->ReadAll(scalervals);
		if(not ret < 0){   // need better error checking
			cout << "error reading scalers: response was " << ret << endl;
		} else {
			cout << "scaler values were: ";
			for(int chan=0; chan<4; chan++){
				cout << scalervals[chan];
				if(chan<3) cout << ", ";
			}
			cout<<endl;
		}
		
	}  // end ToolAnalysis Execute / for loop
	
	Lcard.clear();
	Ncard.clear();
	Data.ch.clear();
}

////////////////////////////////////
// DataModel.h
	
//	vector<CardData*> carddata; 
//	TriggerData *trigdata;
	

CamacCrate* Create(string cardname, string config, int cardslot)
{
	CamacCrate* ccp;
//	if (cardname == "TDC")
//	{
//	  cout<<"TDC"<<endl;
//		ccp = new Lecroy3377(cardslot, config);
//	}
//	if (cardname == "ADC")
//	{
//	  cout<<"ADC"<<endl;
//		ccp = new Lecroy4300b(cardslot, config);
//	}
	if (cardname == "SCA")
	{
	  cout<<"SCA"<<endl;
		ccp = new Jorway85A(cardslot, config);
	}
	return ccp;
}
